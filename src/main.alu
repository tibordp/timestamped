use std::fs::{PathBuf, Path, FileAttr, PathSegmentKind, File};
use std::io::{
    Result, StdioStream, Writable, Readable,
    BufferedWriter, BufferedReader, DEFAULT_BUFFER_SIZE
};

use timestamped::recording::{Recorder, Replayer, JsonConverter};


fn record(args: &[&[u8]]) -> Result<()> {
    fn usage() -> ! {
        eprintln!("Usage: timestamped record [OPTIONS] -- <cmd> [<args>]");
        eprintln!("");
        eprintln!("Options:");
        eprintln!("  -p, --passthrough          Pass through stdout and stderr");
        eprintln!("  -o, --output <filename>    Write the recording to <filename>");
        eprintln!("  -h, --help                 Print this help message");
        process::exit(1)
    }

    let passthrough = false;
    let output_filename: Option<Path> = Option::none();
    let cmdline: Option<&[&[u8]]> = Option::none();

    enum State {
        Normal,
        Output,
        Finished
    }

    let state = State::Normal;
    for (idx, arg) in args.iter().enumerate() {
        state = switch state {
            State::Normal => switch arg {
                "-o", "--output" => State::Output,
                "-p", "--passthrough" => {
                    passthrough = true;
                    State::Normal
                }
                "--" => {
                    if idx == args.len() - 1 {
                        usage();
                    }
                    cmdline = Option::some(args[idx + 1..]);
                    break;
                }
                _ => usage(),
            },
            State::Output => {
                output_filename = Option::some(Path::new(arg));
                State::Normal
            }
            _ => unreachable!()
        }
    }
    if !cmdline.is_some() {
        usage();
    }

    let stream: &mut dyn Writable<Self> = if output_filename.is_some() {
        let file = File::create(output_filename.unwrap())?;
        defer file.close();

        &file
    } else {
        &StdioStream::stdout()
    };

    let buffered = BufferedWriter::new(&stream, DEFAULT_BUFFER_SIZE);
    defer buffered.free();

    let recorder = Recorder::new(cmdline.unwrap(), &buffered, passthrough);
    recorder.record()?;

    buffered.flush()?;
    Result::ok(())
}

fn replay(args: &[&[u8]]) -> Result<()> {
    fn usage() -> ! {
        eprintln!("Usage: timestamped replay [OPTIONS] [<file>]");
        eprintln!("");
        eprintln!("Options:");
        eprintln!("  -s, --speed          Adjust the replay speed [default: 1.0]");
        process::exit(1)
    }

    enum State {
        Normal,
        Speed
    }

    let speed = 1.0f64;
    let state = State::Normal;

    for (idx, arg) in args.iter().enumerate() {
        state = switch state {
            State::Normal => switch arg {
                "--help" => usage(),
                "-s", "--speed" => State::Speed,
                _ => {
                    args = args[idx..];
                    break;
                },
            },
            State::Speed => {
                let maybe_speed = f64::parse(arg);
                if maybe_speed.is_none() {
                    eprintln!("Invalid speed (must be a number)");
                    process::exit(1);
                }
                speed = maybe_speed.unwrap();
                if speed <= 0.0 {
                    eprintln!("Invalid speed (must be positive)");
                    process::exit(1);
                }
                State::Normal
            }
            _ => unreachable!()
        }
    }

    let stream = if args.len() == 0 {
        &StdioStream::stdin() as &mut dyn Readable<Self>
    } else {
        let file = File::open(Path::new(args[0]))?;
        defer file.close();

        &file as &mut dyn Readable<Self>
    };

    let buffered = BufferedReader::new(&stream, DEFAULT_BUFFER_SIZE);
    defer buffered.free();

    let replayer = Replayer::new(&buffered, speed);
    let exit_status = replayer.replay()?;

    if exit_status.code().is_some() {
        std::process::exit(exit_status.code().unwrap())
    } else if (exit_status.signal().is_some()) {
        // Faithfully recreate process terminating due to a signal
        // by killing ourselves.
        libc::raise(exit_status.signal().unwrap());
        unreachable!()
    } else {
        std::process::exit(-1);
    }
}

fn json(args: &[&[u8]]) -> Result<()> {
    fn usage() -> ! {
        eprintln!("Usage: timestamped json [<file>]");
        eprintln!("Options:");
        eprintln!("  -o, --output <filename>    Write the recording to <filename>");
        process::exit(1)
    }

    let output_filename: Option<Path> = Option::none();
    let input_filename: Option<Path> = Option::none();

    enum State {
        Normal,
        Output,
        Finished
    }

    let state = State::Normal;
    for arg in args.iter() {
        state = switch state {
            State::Normal => switch arg {
                "-o", "--output" => State::Output,
                _ => {
                    input_filename = Option::some(Path::new(arg));
                    State::Finished
                },
            },
            State::Output => {
                output_filename = Option::some(Path::new(arg));
                State::Normal
            }
            _ => usage()
        }
    }
    if state != State::Finished && state != State::Normal {
        usage();
    }

    let output: &mut dyn Writable<Self> = if output_filename.is_some() {
        let file = File::create(output_filename.unwrap())?;
        defer file.close();

        &file
    } else {
        &StdioStream::stdout()
    };

    let input: &mut dyn Readable<Self> = if input_filename.is_some() {
        let file = File::open(input_filename.unwrap())?;
        defer file.close();

        &file
    } else {
        &StdioStream::stdin()
    };

    let input = BufferedReader::new(&input, DEFAULT_BUFFER_SIZE);
    defer input.free();

    let output = BufferedWriter::new(&output, DEFAULT_BUFFER_SIZE);
    defer output.free();

    let converter = JsonConverter::new(&input, &output);
    converter.convert()?;

    output.flush()?;
    Result::ok(())
}

fn main(args: &[&[u8]]) -> i32 {
    fn usage() -> ! {
        eprintln!("Usage: timestamped <command> [<args>]");
        eprintln!("");
        eprintln!("Commands:");
        eprintln!("  record [OPTIONS] -- <cmd> [<args>]    Record the output of <command>");
        eprintln!("  replay [OPTIONS] [<file>]                       Replay the output from <file> (or stdin)");
        eprintln!("  json [<file>]                         Convert a recording from <file> (or stdin) to JSON");
        eprintln!("");
        eprintln!("Options:");
        eprintln!("  -p, --passthrough          Pass through stdout and stderr");
        eprintln!("  -o, --output <filename>    Write the recording to <filename>");
        eprintln!("  -h, --help                 Print this help message");
        process::exit(1);
    }

    if args.len() < 2 {
        usage()
    }
    let ret = switch args[1] {
        "record" => record(args[2..]),
        "replay" => replay(args[2..]),
        "json" => json(args[2..]),
        _ => usage()
    };

    if ret.is_ok() {
        0
    } else {
        eprintln!("error: {}", ret.unwrap_err());
        1
    }
}
