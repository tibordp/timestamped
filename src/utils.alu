use std::process::env;
use std::fs::{PathBuf, Path, FileAttr, PathSegmentKind};
use std::io::{Result, FileDescriptor, Writable, Readable};
use std::string::StringBuf;

/// Finds the binary using the PATH environment variable.
fn find_binary(command: &[u8]) -> Option<PathBuf> {
    use std::option::try;
    use std::string::split;

    let original = Path::new(command);

    // If the path looks like an absolute or relative path, do
    // not try to resolve it using PATH
    let segments = original.iter();
    let first_segment = segments.next()?;

    if first_segment.kind != PathSegmentKind::Normal
        || segments.next().is_some  {
        return Option::none()
    }

    env()
        .get("PATH")?
        .split(":")
        .filter_map(|=original, i: &[u8]| -> Option<PathBuf> {
            let resolved = PathBuf::from_str(i);
            defer resolved.free();

            resolved.push(original);

            if FileAttr::from_path(resolved.as_path()).is_ok {
                Option::some(resolved.move())
            } else {
                Option::none()
            }
        })
        .next()
}

/// Formatting adapter that outputs base64 encoded data.
struct Base64Encoded {
    inner: &[u8]
}

impl Base64Encoded {
    use std::fmt::{Formattable, Formatter, Result};

    fn new(bytes: &[u8]) -> Base64Encoded {
        Base64Encoded {
            inner: bytes
        }
    }

    fn fmt<F: Formatter<F>>(self: &Base64Encoded, f: &mut F) -> Result {
        const BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

        let acc: u16;
        let remaining = 0i32;
        let idx = 0usize;

        loop {
            if remaining < 6 {
                if idx == self.inner.len() {
                    break;
                }
                acc = acc << 8 | self.inner[idx] as u16;
                idx += 1;
                remaining += 8;
            }

            let bits = (acc >> (remaining - 6)) & 0x3f;
            f.write_char(BASE64[bits as usize]);
            remaining -= 6;
        }

        switch remaining {
            2 => {
                let bits = (acc & 0x3) << 4;
                f.write_char(BASE64[bits as usize]);
                f.write_str("==");
            }
            4 => {
                let bits = (acc & 0xf) << 2;
                f.write_char(BASE64[bits as usize]);
                f.write_str("=");
            }
            _ => {}
        }

        Result::ok(())
    }
}

/// Convert a string to a base64 representation
fn to_base64(bytes: &[u8]) -> Base64Encoded {
    Base64Encoded::new(bytes)
}

/// Write raw bits of any object to a stream
fn write_any<T, W: Writable<W>>(self: &mut W, value: T) -> Result<()> {
    use std::mem::{size_of, slice::from_raw};
    self.write_all(from_raw(&value as &u8, size_of::<T>()))
}

/// Read raw bits of any object from a stream
fn read_any<T, R: Readable<R>>(self: &mut R) -> Result<T> {
    use std::mem::{uninitialized, size_of, slice::from_raw};
    let ret = uninitialized::<T>();
    self.read_exact(from_raw(&ret as &mut u8, size_of::<T>()))?;
    Result::ok(ret)
}

/// Reads from the given file descriptor into a buffer until the read operation would block.
fn read_some(self: &mut FileDescriptor, dst: &mut StringBuf) -> Result<bool> {
    let maybe_n = self.read_to_end(dst);
    if maybe_n.is_ok {
        Result::ok(true)
    } else {
        let error = maybe_n.unwrap_err();
        switch error.as_errno() {
            Option::some(libc::EWOULDBLOCK),
            Option::some(libc::EAGAIN) => Result::ok(false),
            _ => Result::err(error)
        }
    }
}

/// Convert fmt::Error to io::Error
fn map_err(_: fmt::Error) -> io::Error {
    io::Error::custom("error while writing to stream")
}

#[cfg(test)]
mod tests {
    use std::io::{StringWriter, SliceReader};
    use std::{assert, assert_eq};
    use std::fmt::format_in;
    use std::string::ends_with;

    static BUF: [u8; 64];

    #[test]
    fn test_find_binary() {
        let maybe_sh = find_binary("sh");

        assert!(maybe_sh
            .unwrap()
            .as_path()
            .as_slice()
            .ends_with("/bin/sh")
        );
    }

    #[test]
    fn test_read_any() {
        #[cfg(target_endian = "big")]
        let buf = [1u8, 2, 3, 4];
        #[cfg(target_endian = "little")]
        let buf = [4u8, 3, 2, 1];

        let reader = SliceReader::new(&buf);
        let result: Result<i32> = reader.read_any();

        assert_eq!(result.unwrap(), 0x01020304);
    }

    #[test]
    fn test_write_any() {
        let buf: StringBuf = StringBuf::new();
        let writer = StringWriter::new(&buf);

        writer.write_any(0x01020304i32).unwrap();

        #[cfg(target_endian = "big")]
        assert_eq!(buf.as_slice(), "\x01\x02\x03\x04");
        #[cfg(target_endian = "little")]
        assert_eq!(buf.as_slice(), "\x04\x03\x02\x01");
    }

    #[test]
    fn test_base64() {
        assert_eq!(format_in!(&BUF, "{}", "".to_base64()).unwrap(), "");
        assert_eq!(format_in!(&BUF, "{}", "f".to_base64()).unwrap(), "Zg==");
        assert_eq!(format_in!(&BUF, "{}", "fo".to_base64()).unwrap(), "Zm8=");
        assert_eq!(format_in!(&BUF, "{}", "foo".to_base64()).unwrap(), "Zm9v");
        assert_eq!(format_in!(&BUF, "{}", "foob".to_base64()).unwrap(), "Zm9vYg==");
        assert_eq!(format_in!(&BUF, "{}", "fooba".to_base64()).unwrap(), "Zm9vYmE=");
        assert_eq!(format_in!(&BUF, "{}", "foobar".to_base64()).unwrap(), "Zm9vYmFy");
    }
}
